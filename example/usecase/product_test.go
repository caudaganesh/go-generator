package usecase

import (
	"context"
	"testing"

	"github.com/caudaganesh/go-generator/example/entity"
	"github.com/stretchr/testify/assert"
)

// TestNewProductUC is generated by gospore
func TestNewProductUC(t *testing.T) {
	tests := []struct {
		name string

		want1 *ProductUC
	}{
		//TODO: Add test cases
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			got1 := NewProductUC()

			assert.Equal(t, tt.want1, got1)
		})
	}
}

// TestProductUC_GetProducts is generated by gospore
func TestProductUC_GetProducts(t *testing.T) {

	type args struct {
		c context.Context
	}
	tests := []struct {
		name string
		args args

		want1   []entity.Product
		wantErr bool
	}{
		//TODO: Add test cases
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			executor := &ProductUC{}
			got1, err := executor.GetProducts(tt.args.c)

			assert.Equal(t, tt.want1, got1)

			if tt.wantErr {
				assert.Error(t, err)
			}
		})
	}
}

// TestProductUC_GetProduct is generated by gospore
func TestProductUC_GetProduct(t *testing.T) {

	type args struct {
		c context.Context
	}
	tests := []struct {
		name string
		args args

		want1   entity.Product
		wantErr bool
	}{
		//TODO: Add test cases
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			executor := &ProductUC{}
			got1, err := executor.GetProduct(tt.args.c)

			assert.Equal(t, tt.want1, got1)

			if tt.wantErr {
				assert.Error(t, err)
			}
		})
	}
}

// TestProductUC_AddProduct is generated by gospore
func TestProductUC_AddProduct(t *testing.T) {

	type args struct {
		c   context.Context
		req entity.Product
	}
	tests := []struct {
		name string
		args args

		wantErr bool
	}{
		//TODO: Add test cases
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			executor := &ProductUC{}
			err := executor.AddProduct(tt.args.c, tt.args.req)

			if tt.wantErr {
				assert.Error(t, err)
			}
		})
	}
}

// TestProductUC_UpdateProduct is generated by gospore
func TestProductUC_UpdateProduct(t *testing.T) {

	type args struct {
		c   context.Context
		req entity.Product
	}
	tests := []struct {
		name string
		args args

		wantErr bool
	}{
		//TODO: Add test cases
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			executor := &ProductUC{}
			err := executor.UpdateProduct(tt.args.c, tt.args.req)

			if tt.wantErr {
				assert.Error(t, err)
			}
		})
	}
}

// TestProductUC_DeleteProduct is generated by gospore
func TestProductUC_DeleteProduct(t *testing.T) {

	type args struct {
		c   context.Context
		req entity.Product
	}
	tests := []struct {
		name string
		args args

		wantErr bool
	}{
		//TODO: Add test cases
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			executor := &ProductUC{}
			err := executor.DeleteProduct(tt.args.c, tt.args.req)

			if tt.wantErr {
				assert.Error(t, err)
			}
		})
	}
}
